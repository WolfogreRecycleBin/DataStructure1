#include "SeqStack.h"
template<class ElemType>
class BadQueue
{
private:
	SeqStack<ElemType> in,out;
public:
	BadQueue(){;}
	~BadQueue(){;}
	bool IsEmpty()
	{
		if(in.IsEmpty() && out.IsEmpty())
			return true;
		return false;
	}
	void EnQueue(ElemType e)
	{
		cout<<"EnQueue "<<e<<endl;
		in.Push(e);
	}
	void DelQueue()
	{
		if((*this).IsEmpty())
			cout<<"Queue is empty!"<<endl;
		if(!out.IsEmpty())
		{
			ElemType e;
			out.Pop(e);
			cout<<"DelQueue "<<e<<endl;
		}
		else
		{
			while(!(in.IsEmpty()))
			{
				ElemType e;
				in.Pop(e);
				out.Push(e);
			}
			ElemType e;
			out.Pop(e);
			cout<<"DelQueue "<<e<<endl;
		}
	}
};